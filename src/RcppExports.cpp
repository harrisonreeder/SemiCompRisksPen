// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// nlogLikRP_uni
double nlogLikRP_uni(const arma::vec& para, const arma::vec& delta, const arma::vec& y, const arma::mat& basis, const arma::mat& dbasis, const arma::mat& X);
RcppExport SEXP _SemiCompRisksPen_nlogLikRP_uni(SEXP paraSEXP, SEXP deltaSEXP, SEXP ySEXP, SEXP basisSEXP, SEXP dbasisSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type para(paraSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis(basisSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dbasis(dbasisSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(nlogLikRP_uni(para, delta, y, basis, dbasis, X));
    return rcpp_result_gen;
END_RCPP
}
// ngradRP_uni
arma::vec ngradRP_uni(const arma::vec& para, const arma::vec& y, const arma::vec& delta, const arma::mat& basis, const arma::mat& dbasis, const arma::mat& X);
RcppExport SEXP _SemiCompRisksPen_ngradRP_uni(SEXP paraSEXP, SEXP ySEXP, SEXP deltaSEXP, SEXP basisSEXP, SEXP dbasisSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type para(paraSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis(basisSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dbasis(dbasisSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(ngradRP_uni(para, y, delta, basis, dbasis, X));
    return rcpp_result_gen;
END_RCPP
}
// nlogLikRP_ID_frail_SM
double nlogLikRP_ID_frail_SM(const arma::vec& para, const arma::vec& y1, const arma::vec& y2, const arma::vec& delta1, const arma::vec& delta2, const arma::mat& X1, const arma::mat& X2, const arma::mat& X3, const arma::mat& basis1, const arma::mat& basis2, const arma::mat& basis3, const arma::mat& dbasis1, const arma::mat& dbasis2, const arma::mat& dbasis3);
RcppExport SEXP _SemiCompRisksPen_nlogLikRP_ID_frail_SM(SEXP paraSEXP, SEXP y1SEXP, SEXP y2SEXP, SEXP delta1SEXP, SEXP delta2SEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP X3SEXP, SEXP basis1SEXP, SEXP basis2SEXP, SEXP basis3SEXP, SEXP dbasis1SEXP, SEXP dbasis2SEXP, SEXP dbasis3SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type para(paraSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta1(delta1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta2(delta2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X3(X3SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis1(basis1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis2(basis2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis3(basis3SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dbasis1(dbasis1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dbasis2(dbasis2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dbasis3(dbasis3SEXP);
    rcpp_result_gen = Rcpp::wrap(nlogLikRP_ID_frail_SM(para, y1, y2, delta1, delta2, X1, X2, X3, basis1, basis2, basis3, dbasis1, dbasis2, dbasis3));
    return rcpp_result_gen;
END_RCPP
}
// nlogLikRP_ID_frail_M
double nlogLikRP_ID_frail_M(const arma::vec& para, const arma::vec& y1, const arma::vec& y2, const arma::vec& delta1, const arma::vec& delta2, const arma::mat& X1, const arma::mat& X2, const arma::mat& X3, const arma::mat& basis1, const arma::mat& basis2, const arma::mat& basis3, const arma::mat& basis3_y1, const arma::mat& dbasis1, const arma::mat& dbasis2, const arma::mat& dbasis3);
RcppExport SEXP _SemiCompRisksPen_nlogLikRP_ID_frail_M(SEXP paraSEXP, SEXP y1SEXP, SEXP y2SEXP, SEXP delta1SEXP, SEXP delta2SEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP X3SEXP, SEXP basis1SEXP, SEXP basis2SEXP, SEXP basis3SEXP, SEXP basis3_y1SEXP, SEXP dbasis1SEXP, SEXP dbasis2SEXP, SEXP dbasis3SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type para(paraSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta1(delta1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta2(delta2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X3(X3SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis1(basis1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis2(basis2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis3(basis3SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis3_y1(basis3_y1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dbasis1(dbasis1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dbasis2(dbasis2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dbasis3(dbasis3SEXP);
    rcpp_result_gen = Rcpp::wrap(nlogLikRP_ID_frail_M(para, y1, y2, delta1, delta2, X1, X2, X3, basis1, basis2, basis3, basis3_y1, dbasis1, dbasis2, dbasis3));
    return rcpp_result_gen;
END_RCPP
}
// ngradRP_ID_frail_SM
arma::vec ngradRP_ID_frail_SM(const arma::vec& para, const arma::vec& y1, const arma::vec& y2, const arma::vec& delta1, const arma::vec& delta2, const arma::mat& X1, const arma::mat& X2, const arma::mat& X3, const arma::mat& basis1, const arma::mat& basis2, const arma::mat& basis3, const arma::mat& dbasis1, const arma::mat& dbasis2, const arma::mat& dbasis3);
RcppExport SEXP _SemiCompRisksPen_ngradRP_ID_frail_SM(SEXP paraSEXP, SEXP y1SEXP, SEXP y2SEXP, SEXP delta1SEXP, SEXP delta2SEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP X3SEXP, SEXP basis1SEXP, SEXP basis2SEXP, SEXP basis3SEXP, SEXP dbasis1SEXP, SEXP dbasis2SEXP, SEXP dbasis3SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type para(paraSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta1(delta1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta2(delta2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X3(X3SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis1(basis1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis2(basis2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis3(basis3SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dbasis1(dbasis1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dbasis2(dbasis2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dbasis3(dbasis3SEXP);
    rcpp_result_gen = Rcpp::wrap(ngradRP_ID_frail_SM(para, y1, y2, delta1, delta2, X1, X2, X3, basis1, basis2, basis3, dbasis1, dbasis2, dbasis3));
    return rcpp_result_gen;
END_RCPP
}
// ngradRP_ID_frail_M
arma::vec ngradRP_ID_frail_M(const arma::vec& para, const arma::vec& y1, const arma::vec& y2, const arma::vec& delta1, const arma::vec& delta2, const arma::mat& X1, const arma::mat& X2, const arma::mat& X3, const arma::mat& basis1, const arma::mat& basis2, const arma::mat& basis3, const arma::mat& basis3_y1, const arma::mat& dbasis1, const arma::mat& dbasis2, const arma::mat& dbasis3);
RcppExport SEXP _SemiCompRisksPen_ngradRP_ID_frail_M(SEXP paraSEXP, SEXP y1SEXP, SEXP y2SEXP, SEXP delta1SEXP, SEXP delta2SEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP X3SEXP, SEXP basis1SEXP, SEXP basis2SEXP, SEXP basis3SEXP, SEXP basis3_y1SEXP, SEXP dbasis1SEXP, SEXP dbasis2SEXP, SEXP dbasis3SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type para(paraSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta1(delta1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta2(delta2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X3(X3SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis1(basis1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis2(basis2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis3(basis3SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis3_y1(basis3_y1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dbasis1(dbasis1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dbasis2(dbasis2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dbasis3(dbasis3SEXP);
    rcpp_result_gen = Rcpp::wrap(ngradRP_ID_frail_M(para, y1, y2, delta1, delta2, X1, X2, X3, basis1, basis2, basis3, basis3_y1, dbasis1, dbasis2, dbasis3));
    return rcpp_result_gen;
END_RCPP
}
// nlogLikWB_ID_frail
double nlogLikWB_ID_frail(const arma::vec& para, const arma::vec& y1, const arma::vec& y2, const arma::vec& delta1, const arma::vec& delta2, const arma::mat& X1, const arma::mat& X2, const arma::mat& X3, const std::string model);
RcppExport SEXP _SemiCompRisksPen_nlogLikWB_ID_frail(SEXP paraSEXP, SEXP y1SEXP, SEXP y2SEXP, SEXP delta1SEXP, SEXP delta2SEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP X3SEXP, SEXP modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type para(paraSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta1(delta1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta2(delta2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X3(X3SEXP);
    Rcpp::traits::input_parameter< const std::string >::type model(modelSEXP);
    rcpp_result_gen = Rcpp::wrap(nlogLikWB_ID_frail(para, y1, y2, delta1, delta2, X1, X2, X3, model));
    return rcpp_result_gen;
END_RCPP
}
// ngradWB_ID_frail_SM
arma::vec ngradWB_ID_frail_SM(const arma::vec& para, const arma::vec& y1, const arma::vec& y2, const arma::vec& delta1, const arma::vec& delta2, const arma::mat& X1, const arma::mat& X2, const arma::mat& X3);
RcppExport SEXP _SemiCompRisksPen_ngradWB_ID_frail_SM(SEXP paraSEXP, SEXP y1SEXP, SEXP y2SEXP, SEXP delta1SEXP, SEXP delta2SEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP X3SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type para(paraSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta1(delta1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta2(delta2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X3(X3SEXP);
    rcpp_result_gen = Rcpp::wrap(ngradWB_ID_frail_SM(para, y1, y2, delta1, delta2, X1, X2, X3));
    return rcpp_result_gen;
END_RCPP
}
// ngradWB_ID_frail_M
arma::vec ngradWB_ID_frail_M(const arma::vec& para, const arma::vec& y1, const arma::vec& y2, const arma::vec& delta1, const arma::vec& delta2, const arma::mat& X1, const arma::mat& X2, const arma::mat& X3);
RcppExport SEXP _SemiCompRisksPen_ngradWB_ID_frail_M(SEXP paraSEXP, SEXP y1SEXP, SEXP y2SEXP, SEXP delta1SEXP, SEXP delta2SEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP X3SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type para(paraSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta1(delta1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta2(delta2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X3(X3SEXP);
    rcpp_result_gen = Rcpp::wrap(ngradWB_ID_frail_M(para, y1, y2, delta1, delta2, X1, X2, X3));
    return rcpp_result_gen;
END_RCPP
}
// nhessWB_ID_frail_SM
arma::mat nhessWB_ID_frail_SM(const arma::vec& para, const arma::vec& y1, const arma::vec& y2, const arma::vec& delta1, const arma::vec& delta2, const arma::mat& X1, const arma::mat& X2, const arma::mat& X3);
RcppExport SEXP _SemiCompRisksPen_nhessWB_ID_frail_SM(SEXP paraSEXP, SEXP y1SEXP, SEXP y2SEXP, SEXP delta1SEXP, SEXP delta2SEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP X3SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type para(paraSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta1(delta1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta2(delta2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X3(X3SEXP);
    rcpp_result_gen = Rcpp::wrap(nhessWB_ID_frail_SM(para, y1, y2, delta1, delta2, X1, X2, X3));
    return rcpp_result_gen;
END_RCPP
}
// nhessWB_ID_frail_M
arma::mat nhessWB_ID_frail_M(const arma::vec& para, const arma::vec& y1, const arma::vec& y2, const arma::vec& delta1, const arma::vec& delta2, const arma::mat& X1, const arma::mat& X2, const arma::mat& X3);
RcppExport SEXP _SemiCompRisksPen_nhessWB_ID_frail_M(SEXP paraSEXP, SEXP y1SEXP, SEXP y2SEXP, SEXP delta1SEXP, SEXP delta2SEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP X3SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type para(paraSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta1(delta1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta2(delta2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X3(X3SEXP);
    rcpp_result_gen = Rcpp::wrap(nhessWB_ID_frail_M(para, y1, y2, delta1, delta2, X1, X2, X3));
    return rcpp_result_gen;
END_RCPP
}
// ngradWB_ID_frail_mat_SM
arma::mat ngradWB_ID_frail_mat_SM(const arma::vec& para, const arma::vec& y1, const arma::vec& y2, const arma::vec& delta1, const arma::vec& delta2, const arma::mat& X1, const arma::mat& X2, const arma::mat& X3);
RcppExport SEXP _SemiCompRisksPen_ngradWB_ID_frail_mat_SM(SEXP paraSEXP, SEXP y1SEXP, SEXP y2SEXP, SEXP delta1SEXP, SEXP delta2SEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP X3SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type para(paraSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta1(delta1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta2(delta2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X3(X3SEXP);
    rcpp_result_gen = Rcpp::wrap(ngradWB_ID_frail_mat_SM(para, y1, y2, delta1, delta2, X1, X2, X3));
    return rcpp_result_gen;
END_RCPP
}
// ngradWB_ID_frail_mat_M
arma::mat ngradWB_ID_frail_mat_M(const arma::vec& para, const arma::vec& y1, const arma::vec& y2, const arma::vec& delta1, const arma::vec& delta2, const arma::mat& X1, const arma::mat& X2, const arma::mat& X3);
RcppExport SEXP _SemiCompRisksPen_ngradWB_ID_frail_mat_M(SEXP paraSEXP, SEXP y1SEXP, SEXP y2SEXP, SEXP delta1SEXP, SEXP delta2SEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP X3SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type para(paraSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta1(delta1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta2(delta2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X3(X3SEXP);
    rcpp_result_gen = Rcpp::wrap(ngradWB_ID_frail_mat_M(para, y1, y2, delta1, delta2, X1, X2, X3));
    return rcpp_result_gen;
END_RCPP
}
// admm_po_cpp
arma::vec admm_po_cpp(const arma::vec& beta_tilde, const arma::vec& slambda, const arma::mat& penmat, const arma::mat& Q, const arma::vec& eigval, const bool fast, const int maxiter, double rho, const arma::vec& beta_old);
RcppExport SEXP _SemiCompRisksPen_admm_po_cpp(SEXP beta_tildeSEXP, SEXP slambdaSEXP, SEXP penmatSEXP, SEXP QSEXP, SEXP eigvalSEXP, SEXP fastSEXP, SEXP maxiterSEXP, SEXP rhoSEXP, SEXP beta_oldSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta_tilde(beta_tildeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type slambda(slambdaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type penmat(penmatSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eigval(eigvalSEXP);
    Rcpp::traits::input_parameter< const bool >::type fast(fastSEXP);
    Rcpp::traits::input_parameter< const int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta_old(beta_oldSEXP);
    rcpp_result_gen = Rcpp::wrap(admm_po_cpp(beta_tilde, slambda, penmat, Q, eigval, fast, maxiter, rho, beta_old));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SemiCompRisksPen_nlogLikRP_uni", (DL_FUNC) &_SemiCompRisksPen_nlogLikRP_uni, 6},
    {"_SemiCompRisksPen_ngradRP_uni", (DL_FUNC) &_SemiCompRisksPen_ngradRP_uni, 6},
    {"_SemiCompRisksPen_nlogLikRP_ID_frail_SM", (DL_FUNC) &_SemiCompRisksPen_nlogLikRP_ID_frail_SM, 14},
    {"_SemiCompRisksPen_nlogLikRP_ID_frail_M", (DL_FUNC) &_SemiCompRisksPen_nlogLikRP_ID_frail_M, 15},
    {"_SemiCompRisksPen_ngradRP_ID_frail_SM", (DL_FUNC) &_SemiCompRisksPen_ngradRP_ID_frail_SM, 14},
    {"_SemiCompRisksPen_ngradRP_ID_frail_M", (DL_FUNC) &_SemiCompRisksPen_ngradRP_ID_frail_M, 15},
    {"_SemiCompRisksPen_nlogLikWB_ID_frail", (DL_FUNC) &_SemiCompRisksPen_nlogLikWB_ID_frail, 9},
    {"_SemiCompRisksPen_ngradWB_ID_frail_SM", (DL_FUNC) &_SemiCompRisksPen_ngradWB_ID_frail_SM, 8},
    {"_SemiCompRisksPen_ngradWB_ID_frail_M", (DL_FUNC) &_SemiCompRisksPen_ngradWB_ID_frail_M, 8},
    {"_SemiCompRisksPen_nhessWB_ID_frail_SM", (DL_FUNC) &_SemiCompRisksPen_nhessWB_ID_frail_SM, 8},
    {"_SemiCompRisksPen_nhessWB_ID_frail_M", (DL_FUNC) &_SemiCompRisksPen_nhessWB_ID_frail_M, 8},
    {"_SemiCompRisksPen_ngradWB_ID_frail_mat_SM", (DL_FUNC) &_SemiCompRisksPen_ngradWB_ID_frail_mat_SM, 8},
    {"_SemiCompRisksPen_ngradWB_ID_frail_mat_M", (DL_FUNC) &_SemiCompRisksPen_ngradWB_ID_frail_mat_M, 8},
    {"_SemiCompRisksPen_admm_po_cpp", (DL_FUNC) &_SemiCompRisksPen_admm_po_cpp, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_SemiCompRisksPen(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
